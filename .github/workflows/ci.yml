name: build

on:
  push:
    branches-ignore:
      - 'wip-*'
    paths-ignore:
      - 'README.md'

  pull_request:
    branches:
      - 'master'
  schedule:
    - cron: '0 12 * * *'

jobs:
  ci:

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        name:
          - ubuntu-18.04-gcc-7
          - ubuntu-18.04-clang-5.0
          - macOS-latest

        include:
          - name: ubuntu-18.04-gcc-7
            os: ubuntu-18.04
            compiler: gcc
            version: '7'
            ccov: ON
          - name: ubuntu-18.04-clang-5.0
            os: ubuntu-18.04
            compiler: clang
            version: '5.0'
            ccov: OFF
          - name: macOS-latest
            os: macOS-latest
            compiler: xcode
            version: 'NOT USED'
            ccov: OFF

    steps:
      - uses: actions/checkout@v2-beta
        with:
          fetch-depth: 5

      - name: Setup Prerequisites (Linux)
        if: runner.os == 'Linux'
        run: |
          echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test --yes
          sudo apt-get update --quiet --yes 1>/dev/null

          if [ "${{ matrix.ccov }}" = "ON" ]; then
            sudo apt-get install --no-install-recommends -q -y lcov
          fi

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install --no-install-recommends -q -y gcc-${{ matrix.version }}
            echo CC=gcc-${{ matrix.version }} >> $GITHUB_ENV
            echo CXX=g++-${{ matrix.version }} >> $GITHUB_ENV
          else
            sudo apt-get install --no-install-recommends -q -y clang-${{ matrix.version }}
            echo CC=clang-${{ matrix.version }} >> $GITHUB_ENV
            echo CXX=clang++-${{ matrix.version }} >> $GITHUB_ENV
          fi

      - name: Setup Prerequisites (macOS)
        if: runner.os == 'macOS'
        run: |
          sudo xcode-select -switch /Applications/Xcode.app

          echo CC=$(xcrun -f clang) >> $GITHUB_ENV
          echo CXX=$(xcrun -f clang++) >> $GITHUB_ENV
          echo "SDKROOT=$(xcodebuild -version -sdk macosx Path)" >> $GITHUB_ENV
          echo "$(dirname $(xcrun -f clang))" >> $GITHUB_PATH

      - uses: actions/cache@v1
        name: Setup conan cache
        id: conan-cache
        with:
          path: ~/.conan
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-conan-

      - uses: actions/cache@v1
        name: Setup pip cache
        id: pip-cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          version: 3.8
          architecture: x64

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure x64 Debug
        run: |
          $CC --version
          cmake --version

          cmake -S . -Bbuild -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=${{ matrix.ccov }}
          echo YTC_TESTS_ROOT=${GITHUB_WORKSPACE}/tests >> $GITHUB_ENV

      - name: Build x64 Debug
        run: cmake --build build -j "$(getconf _NPROCESSORS_ONLN)"

      - name: Run Tests
        run: cmake --build build --target check

      - name: Create lcov report
        if: matrix.ccov == 'ON'
        run: lcov --directory build --capture --output-file ./build/coverage.info

      - name: Filter out extra files
        if: matrix.ccov == 'ON'
        run: |
          lcov \
            --remove ./build/coverage.info \
            '/usr/*'                       \
            "${HOME}"'/.conan/*'           \
            '*/tests/*'                    \
            --output-file ./build/coverage.info

      - name: Output coverage data for debugging
        if: matrix.ccov == 'ON'
        run: lcov --list ./build/coverage.info
